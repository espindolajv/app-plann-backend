generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  name     String
  password String

  lists List[] @relation("UserLists")

  adminOf   Workspace[] @relation("AdminWorkspace", fields: [adminOfId], references: [id])
  adminOfId String[]    @db.ObjectId

  workspaces   Workspace[] @relation("MembersWorkspace", fields: [workspacesId], references: [id])
  workspacesId String[]    @db.ObjectId
}

model List {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  description String?

  user        User       @relation("UserLists", fields: [userId], references: [id])
  userId      String     @db.ObjectId

  tasks       Task[]     @relation("ListTask")
  
  workspace   Workspace? @relation("WorkspaceList", fields: [workspaceId], references: [id])
  workspaceId String?    @db.ObjectId
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  checked     Boolean  @default(false)
  priority    Priority
  description String?

  list        List     @relation("ListTask", fields: [listId], references: [id])
  listId      String   @db.ObjectId
}

model Workspace {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  color       String
  description String?

  admin       User[]   @relation("AdminWorkspace", fields: [adminId], references: [id])
  adminId     String[] @db.ObjectId

  members     User[]   @relation("MembersWorkspace", fields: [membersId], references: [id])
  membersId   String[] @db.ObjectId

  lists       List[]   @relation("WorkspaceList")
}

enum Priority {
  high
  medium
  low
}
